
""""""""""""""""""""""""""""""""""""""""""""
"            Package setup                 "
""""""""""""""""""""""""""""""""""""""""""""

execute pathogen#infect()

" CloseTag : Intelligently close HTML tags
autocmd FileType html,htmldjango,jinjahtml,eruby,mako let b:closetag_html_style=1
autocmd FileType html,xhtml,xml,htmldjango,jinjahtml,eruby,mako source ~/.vim/bundle/closetag.vim/plugin/closetag.vim

" vim-slime
let g:slime_target = "tmux"
let g:slime_paste_file = tempname()

""""""""""""""""""" Neocomplcache  """""""""""""""""""""""""""
" Disable AutoComplPop. Comment out this line if AutoComplPop is not installed.
let g:acp_enableAtStartup = 0
" Launches neocomplcache automatically on vim startup.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underscore completion.
let g:neocomplcache_enable_underbar_completion = 1
" Sets minimum char length of syntax keyword.
let g:neocomplcache_min_syntax_length = 3
" buffer file name pattern that locks neocomplcache. e.g. ku.vim or fuzzyfinder 
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Define file-type dependent dictionaries.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
    \ }

" Define keyword, for minor languages
if !exists('g:neocomplcache_keyword_patterns')
  let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" SuperTab like snippets behavior.
"imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" AutoComplPop like behavior.
"let g:neocomplcache_enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplcache_enable_auto_select = 1
"let g:neocomplcache_disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<TAB>"
"inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"

" Enable omni completion. Not required if they are already set elsewhere in .vimrc
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd filetype python setlocal completeopt-=preview

" Enable heavy omni completion, which require computational power and may stall the vim. 
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.go = '\h\w*\.\?'
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
"autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""
"           General setup                  "
""""""""""""""""""""""""""""""""""""""""""""
" theme
colorscheme default

" encoding dectection
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1

" enable filetype dectection and ft specific plugin/indent
filetype plugin indent on

set number            " set line number
" set cursorline        " highlight current line
set bs=indent,eol,start      " allow backspacing over everything in insert mode

" Set syntax
syntax enable
syntax on             " set syntax highlight on

" Search operations
set hlsearch          " highlight search
set ignorecase
set smartcase
set incsearch

" Set indent
set autoindent
set smartindent       " smart indent
autocmd FileType c setlocal tabstop=8 shiftwidth=8 softtabstop=8 textwidth=79
autocmd FileType ruby setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=79 expandtab
autocmd FileType php,matlab setlocal tabstop=4 shiftwidth=4 softtabstop=4 textwidth=79 expandtab
autocmd FileType coffee,javascript,jade setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4 textwidth=79 expandtab
autocmd FileType erlang setlocal tabstop=4 shiftwidth=4 softtabstop=4 textwidth=79 expandtab
autocmd FileType lua setlocal tabstop=4 shiftwidth=4 softtabstop=4 textwidth=79 expandtab
autocmd FileType html,htmldjango,xhtml,haml,xml setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=0 expandtab
autocmd FileType sass,scss,css setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=79 expandtab
autocmd FileType haskell setlocal tabstop=4 shiftwidth=4 softtabstop=4 textwidth=79 expandtab

" Set what are shown in statubar
set showmatch
set showcmd
set title
set laststatus=2
set matchtime=2

" Set statusline
set statusline=%F%y%m%r%=Current:%l,%c

" highlight end-of-line whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
autocmd BufWinEnter * match ExtraWhitespace /\s\+\%#\@!$/

map k gk
map j gj

" emacs key-bindings
inoremap <c-a> <esc>0i
inoremap <c-e> <esc>$a
inoremap <c-k> <esc>d$a
inoremap <c-u> <esc>ddi
nnoremap <c-a> 0
nnoremap <c-e> $
nnoremap <c-k> d$

au BufEnter *.hs compiler ghc
let g:haddock_browser="open"

au BufNewFile,BufRead *.hs map <buffer> <F1> :Hoogle

nmap <F8> :TagbarToggle<CR>
autocmd vimenter *.hs NERDTree

set completeopt-=preview
