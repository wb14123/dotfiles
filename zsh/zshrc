# Path to your oh-my-zsh configuration.
ZSH=~/oh-my-zsh 
# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.

# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable bi-weekly auto-update checks
DISABLE_AUTO_UPDATE="true"

# Uncomment to change how many often would you like to wait before auto-updates occur? (in days)
# export UPDATE_ZSH_DAYS=13

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git go sudo extract zsh-syntax-highlighting)

source $ZSH/oh-my-zsh.sh

export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
export EDITOR="vim"

export GOPATH="$HOME/go"
export GOROOT="/usr/lib/go"

export PATH=$PATH:/usr/local/sbin:/opt/android-sdk/tools:$GOPATH/bin:$GOROOT/bin:~/.cabal/bin:~/.local/bin
# export JAVA_HOME=`/usr/libexec/java_home -v 1.8`

# set tmux to 256color
alias tmux='TERM=xterm-256color tmux -2'

# Customize to your needs...
# my theme

eval my_orange='$FG[214]'

function prompt_char {
	if [ $UID -eq 0 ]; then echo "#"; else echo "->"; fi
}

PROMPT='
%(!.%{$fg_bold[red]%}.%{$fg_bold[red]%}%(?..[%?] )%{$FG[178]%}%n%{$fg_bold[grey]%} @ )$FG[070]%m %{$FG[148]%}(%(!.%1~.%~)) %{$fg_bold[yellow]%}$(git_prompt_info)%{$fg_bold[grey]%}%_$(prompt_char)%{$reset_color%} '

ZSH_THEME_GIT_PROMPT_PREFIX="("
ZSH_THEME_GIT_PROMPT_SUFFIX=") "
ZSH_THEME_GIT_PROMPT_DIRTY="$my_orange *%{$fg_bold[yellow]%}"
ulimit -n 1024

alias gcl='git branch --merged | grep -v \* | xargs git branch -D'
alias g2n="git add -A . && git stash && git checkout master && git pull origin master && gcl && git stash pop &&  git checkout -b"
alias copy='xsel -ib'

# export DOCKER_TLS_VERIFY="1"
# export DOCKER_HOST="tcp://192.168.99.100:2376"
# export DOCKER_CERT_PATH="/Users/wangbin/.docker/machine/machines/docker-vm"
# export DOCKER_MACHINE_NAME="docker-vm"

export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles

# zsh vim bindings

bindkey -v
export KEYTIMEOUT=1

function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'

  elif [[ ${KEYMAP} == main ]] ||
       [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}
zle -N zle-keymap-select


_fix_cursor() {
   echo -ne '\e[5 q'
}

precmd_functions+=(_fix_cursor)

bindkey '^P' up-history
bindkey '^N' down-history
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^E' end-of-line
bindkey '^A' beginning-of-line
bindkey '^w' backward-kill-word
bindkey '^r' history-incremental-search-backward

# Use vim keys in tab complete menu:
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

export VAGRANT_HOME=/home/wangbin/data/vagrant
source /usr/share/nvm/init-nvm.sh

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/wangbin/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/wangbin/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/wangbin/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/wangbin/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<


alias setclip="xclip -selection c"
alias getclip="xclip -selection c -o"



# zellij_tab_name_update_dir() {
# 	if [[ -n $ZELLIJ ]]; then
# 		tab_name=''
# 		tab_name=`dirs -c ; dirs`
# 		if [[ $tab_name == $HOME ]]; then
# 			tab_name="~"
# 		fi
# 		command nohup zellij action rename-tab $tab_name >/dev/null 2>&1
# 	fi
# }
# 
# zellij_tab_name_update_dir
# chpwd_functions+=(zellij_tab_name_update_dir)

# zellij_tab_name_update_exec() {
# 	tab_name=$2
# 	command nohup zellij action rename-tab "$tab_name" >/dev/null 2>&1
# }
# 
# preexec_functions+=(zellij_tab_name_update_exec)
# precmd_functions+=(zellij_tab_name_update_dir)

source <(fzf --zsh)
